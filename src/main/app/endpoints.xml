<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:batch="http://www.mulesoft.org/schema/mule/batch"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc" xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" version="EE-3.6.1"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd">
    <data-mapper:config name="XML_To_Account" transformationGraphPath="xml_to_account.grf" doc:name="DataMapper"/>
    <http:listener-config name="HTTP_Listener_Configuration" host="0.0.0.0" port="${http.port}" doc:name="HTTP Listener Configuration"/>


	<!-- This is the endpoints file. In this file you should declare all your inbound and outbound endpoints in order to control the access to your integration -->
    <flow name="triggerPushFlow"  initialState="started">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/" doc:name="HTTP"/>

        <expression-component doc:name="acquire lock"><![CDATA[app.registry['PollSynchronizer'].lock();]]></expression-component>
        <set-variable variableName="sourceSystem" value="#[message.inboundProperties.'http.query.params'.get('source')]" doc:name="set 'sourceSystem' variable"/>
        <object-to-string-transformer doc:name="transform inputStream to String"/>
        <data-mapper:transform config-ref="XML_To_Account" doc:name="XML To Account"/>

        <foreach doc:name="For Each Account">
            <expression-component doc:name="transform LastModifiedDate Calendar to String"><![CDATA[import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Calendar;

// Calculate current timezone offset 
Calendar calNow = Calendar.getInstance();
calNow.setTimeInMillis(System.currentTimeMillis());

// Format LastModifiedDate to Salesforce specific format
SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");

Calendar cal = payload.LastModifiedDate;
String date = formatter.format(new Date(cal.getTimeInMillis() - calNow.getTimeZone().getOffset(System.currentTimeMillis()) ));

// Update LastModifiedDate with computed value
payload.put("LastModifiedDate", date+"Z");]]></expression-component>
        </foreach>
        <choice doc:name="Choice">
            <when expression="#[flowVars['sourceSystem'] == 'B']">
                <batch:execute name="fromSalesforceBtoSalesforceABatch" doc:name="trigger from SalesforceB to SalesforceA batch"/>
            </when>
            <when expression="#[flowVars['sourceSystem'] == 'A']">
                <batch:execute name="fromSalesforceAtoSalesforceBBatch" doc:name="trigger from SalesforceA to SalesforceB batch"/>
            </when>
        </choice>


        <set-payload value="&lt;soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' xmlns:out='http://soap.sforce.com/2005/09/outbound'&gt;&lt;soapenv:Header/&gt;&lt;soapenv:Body&gt;&lt;out:notificationsResponse&gt;&lt;out:Ack&gt;true&lt;/out:Ack&gt;&lt;/out:notificationsResponse&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;" doc:name="Set HTTP response body"/>

        <exception-strategy ref="defaultChoiceExceptionStrategy" doc:name="Reference Exception Strategy"/>
    </flow>

	<!-- This is the endponits file. In this file you should declare all your inbound and outbound endpoints, in order to control the access to your integration -->

    <flow name="triggerSyncFromAFlow"  processingStrategy="synchronous">
		<poll doc:name="Poll">
			<fixed-frequency-scheduler frequency="${polling.frequency}" startDelay="10000" />
			<watermark variable="lastQueryDateA" default-expression="${watermark.default.expression}" selector="MAX" selector-expression="#[payload.LastModifiedDate]" />
            <processor-chain doc:name="Processor Chain">
                <expression-component doc:name="acquire lock"><![CDATA[app.registry['PollSynchronizer'].lock();]]></expression-component>
                <sfdc:query config-ref="SalesforceA" query="dsql:SELECT AccountNumber,AccountSource,AnnualRevenue,BillingCity,BillingCountry,BillingPostalCode,BillingState,BillingStreet,Description,Fax,Id,Industry,LastModifiedById,LastModifiedDate,Name,NumberOfEmployees,OwnerId,Ownership,ParentId,Phone,Rating,ShippingCity,ShippingCountry,ShippingPostalCode,ShippingState,ShippingStreet,Sic,SicDesc,Site,TickerSymbol,Type,Website FROM Account WHERE LastModifiedDate &gt; #[flowVars['lastQueryDateA']] ORDER BY LastModifiedDate ASC LIMIT 200" doc:name="fetch accounts from A"/>
            </processor-chain>

		</poll>

        <batch:execute name="fromSalesforceAtoSalesforceBBatch" doc:name="trigger batch execution"/>
        <exception-strategy ref="defaultChoiceExceptionStrategy" doc:name="Reference Exception Strategy"/>
    </flow>
    
	<flow name="triggerSyncFromBFlow"  processingStrategy="synchronous">
   		<poll doc:name="Poll">
			<fixed-frequency-scheduler frequency="${polling.frequency}" startDelay="10000" />
			<watermark variable="lastQueryDateB" default-expression="${watermark.default.expression}" selector="MAX" selector-expression="#[payload.LastModifiedDate]" />
            <processor-chain doc:name="Processor Chain">
                <expression-component doc:name="acquire lock"><![CDATA[app.registry['PollSynchronizer'].lock();]]></expression-component>
                <sfdc:query config-ref="SalesforceB" query="dsql:SELECT AccountNumber,AccountSource,AnnualRevenue,BillingCity,BillingCountry,BillingPostalCode,BillingState,BillingStreet,Description,Fax,Id,Industry,LastModifiedById,LastModifiedDate,Name,NumberOfEmployees,OwnerId,Ownership,ParentId,Phone,Rating,ShippingCity,ShippingCountry,ShippingPostalCode,ShippingState,ShippingStreet,Sic,SicDesc,Site,TickerSymbol,Type,Website FROM Account WHERE LastModifiedDate &gt; #[flowVars['lastQueryDateB']] ORDER BY LastModifiedDate ASC LIMIT 200" doc:name="fetch accounts from B"/>
            </processor-chain>


		</poll>

        <batch:execute name="fromSalesforceBtoSalesforceABatch" doc:name="trigger batch execution"/>
        <exception-strategy ref="defaultChoiceExceptionStrategy" doc:name="Reference Exception Strategy"/>
    </flow>

</mule>
